import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { MapPin, Hourglass, Calendar, Search } from "lucide-react";
// S·ª¨A D√íNG IMPORT N√ÄY:
// ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n '../lib/sanityClient' l√† ch√≠nh x√°c ƒë·∫øn file client Sanity c·ªßa b·∫°n
import { client, urlFor } from '../lib/sanityClient';

const Project = () => {
  const [projects, setProjects] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [locationFilter, setLocationFilter] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  // Th√™m startDateFilter n·∫øu b·∫°n mu·ªën c√≥ b·ªô l·ªçc n√†y nh∆∞ File 1
  const [startDateFilter, setStartDateFilter] = useState('');

  const navigate = useNavigate();

  // üü¢ Fetch d·ªØ li·ªáu t·ª´ Sanity (C·∫¨P NH·∫¨T QUERY V√Ä X·ª¨ L√ù DATA)
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        // C·∫≠p nh·∫≠t query ƒë·ªÉ l·∫•y 'slug' v√† 'image' (d∆∞·ªõi d·∫°ng asset reference)
        const query = `
          *[_type == "project"] {
            _id,
            name,
            slug, // L·∫•y slug ƒë·ªÉ d√πng cho navigation
            location,
            status,
            startDate,
            image, // L·∫•y image asset reference ƒë·ªÉ d√πng v·ªõi urlFor
            description
          }
        `;

        const data = await client.fetch(query);

        // X·ª≠ l√Ω d·ªØ li·ªáu, c√≥ th·ªÉ th√™m gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
        const formattedProjects = data.map((item) => ({
          ...item, // Gi·ªØ l·∫°i t·∫•t c·∫£ c√°c tr∆∞·ªùng g·ªëc t·ª´ Sanity nh∆∞ _id, slug, image object
          // B·∫°n c√≥ th·ªÉ v·∫´n mu·ªën id ri√™ng n·∫øu JSX ƒëang d√πng project.id thay v√¨ project._id
          // id: item._id,
          name: item.name || "Ch∆∞a c√≥ t√™n", // V√≠ d·ª• th√™m default
          location: item.location || "Kh√¥ng x√°c ƒë·ªãnh",
          status: item.status || "Ch∆∞a c·∫≠p nh·∫≠t",
          startDate: item.startDate || "N/A", // Ho·∫∑c m·ªôt ƒë·ªãnh d·∫°ng ng√†y m·∫∑c ƒë·ªãnh
          description: item.description || "Ch∆∞a c√≥ m√¥ t·∫£."
          // image s·∫Ω l√† object, kh√¥ng ph·∫£i imageUrl tr·ª±c ti·∫øp n·ªØa
        }));

        setProjects(formattedProjects);
      } catch (error) {
        console.error("L·ªói khi fetch d·ª± √°n t·ª´ Sanity:", error);
        // C√≥ th·ªÉ set m·ªôt tr·∫°ng th√°i l·ªói ƒë·ªÉ hi·ªÉn th·ªã cho ng∆∞·ªùi d√πng
      }
    };

    fetchProjects();
  }, []);

  // üü° Filter theo t√¨m ki·∫øm v√† b·ªô l·ªçc (Th√™m startDateFilter v√†o logic)
  const filteredProjects = projects.filter((project) => {
    const projectStartDate = project.startDate && project.startDate !== "N/A" ? new Date(project.startDate) : null;
    const filterStartDate = startDateFilter ? new Date(startDateFilter) : null;

    return (
        (project.name || '').toLowerCase().includes(searchTerm.toLowerCase()) &&
        (locationFilter === "" || project.location === locationFilter) &&
        (statusFilter === "" || project.status === statusFilter) &&
        (startDateFilter === "" || (projectStartDate && filterStartDate && projectStartDate >= filterStartDate))
    );
  });

  return (
      <div className="py-16 px-6 max-w-7xl mx-auto mt-16">
        <h1 className="text-3xl font-bold text-center mb-6">Danh s√°ch D·ª± √°n</h1>

        {/* B·ªô l·ªçc - Th√™m b·ªô l·ªçc ng√†y n·∫øu c·∫ßn */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4 mb-6"> {/* TƒÉng cols n·∫øu th√™m filter */}
          <div className="relative">
            <Search className="absolute left-3 top-3 text-gray-400" size={20} />
            <input
                type="text"
                className="w-full pl-10 pr-4 py-2 border rounded-lg focus:ring focus:ring-blue-300"
                placeholder="T√¨m ki·∫øm d·ª± √°n..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <select
              className="border rounded-lg py-2 px-3"
              value={locationFilter}
              onChange={(e) => setLocationFilter(e.target.value)}
          >
            <option value="">T·∫•t c·∫£ ƒë·ªãa ƒëi·ªÉm</option>
            {[...new Set(projects.map((p) => p.location).filter(Boolean))].sort().map((location) => (
                <option key={location} value={location}>
                  {location}
                </option>
            ))}
          </select>
          <select
              className="border rounded-lg py-2 px-3"
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            {[...new Set(projects.map((p) => p.status).filter(Boolean))].sort().map((status) => (
                <option key={status} value={status}>
                  {status}
                </option>
            ))}
          </select>
          {/* V√≠ d·ª• th√™m b·ªô l·ªçc ng√†y b·∫Øt ƒë·∫ßu */}
          <input
              type="date"
              className="border rounded-lg py-2 px-3"
              value={startDateFilter}
              onChange={(e) => setStartDateFilter(e.target.value)}
          />
        </div>

        {/* Danh s√°ch d·ª± √°n */}
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {filteredProjects.length > 0 ? (
              filteredProjects.map((project) => (
                  <div
                      key={project._id} // N√™n d√πng _id l√† key g·ªëc t·ª´ Sanity
                      className="relative group cursor-pointer"
                      // C·∫¨P NH·∫¨T NAVIGATION: D√πng slug n·∫øu c√≥, fallback v·ªÅ _id
                      onClick={() => navigate(`/du-an/${project.slug?.current || project._id}`, { state: project })}
                  >
                    <div className="relative overflow-hidden rounded-lg shadow-md transition duration-300 ease-in-out">
                      {/* C·∫¨P NH·∫¨T HI·ªÇN TH·ªä ·∫¢NH: D√πng urlFor */}
                      <img
                          src={project.image ? urlFor(project.image).width(400).height(300).url() : 'https://via.placeholder.com/400x300?text=No+Image'}
                          alt={project.name}
                          className="w-full h-64 object-cover transition duration-500 group-hover:opacity-50"
                      />
                      <div className="absolute top-0 left-0 w-full h-full bg-black bg-opacity-40 opacity-0 group-hover:opacity-100 transition-opacity duration-300 ease-in-out p-4 flex flex-col justify-end">
                        <div className="text-white text-lg font-semibold">{project.name}</div>
                        <div className="text-gray-200 mt-1 text-sm"> {/* Gi·∫£m k√≠ch th∆∞·ªõc ch·ªØ cho d·ªÖ nh√¨n */}
                          <div className="flex items-center gap-1 truncate"> {/* Th√™m truncate n·∫øu text d√†i */}
                            <MapPin size={14} /> {project.location}
                          </div>
                          <div className="flex items-center gap-1">
                            <Hourglass size={14} /> {project.status}
                          </div>
                          <div className="flex items-center gap-1">
                            <Calendar size={14} /> {new Date(project.startDate).toLocaleDateString('vi-VN')} {/* Format l·∫°i ng√†y */}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
              ))
          ) : (
              <p className="text-center text-gray-500 col-span-full">Kh√¥ng t√¨m th·∫•y d·ª± √°n n√†o ph√π h·ª£p!</p>
          )}
        </div>
      </div>
  );
};

export default Project;
